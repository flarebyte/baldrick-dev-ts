import {jest} from '@jest/globals';
import {
  createPackageJson,
  createTempDirsSync,
  createTestingFilesSync,
  editorConfig,
  emptyTempDir,
  indexTestTs,
  indexTs,
  loadSelection,
  prettierContent,
  problematicTs,
  readmeMd,
  tsconfigNode,
} from './generator';
import {
  runFilesInstruction,
  runFilterInstruction,
  runGlobInstruction,
  runLoadInstruction,
} from '../src/instruction-runner.js';
import { MicroInstruction } from '../src/model.js';

const termFormatter = jest.fn();

const errTermFormatter = jest.fn();;
const testFolder = 'glob';

const createProjectDir = () => {
  const tempDir = createTempDirsSync(testFolder);
  const fileContents = [
    createPackageJson('module-' + tempDir.replace('/', '-')),
    indexTs,
    problematicTs,
    indexTestTs,
    readmeMd,
    editorConfig,
    prettierContent,
    loadSelection,
    tsconfigNode('es2021'),
  ];
  createTestingFilesSync(tempDir, fileContents);
  return tempDir;
};

describe('Run instructions for filtering and glob', () => {
  let modulePath: string;
  beforeAll(() => {
    emptyTempDir(testFolder);
    modulePath = createProjectDir();
  });

  afterAll(() => {
    emptyTempDir(testFolder);
  });

  beforeEach(() => {
    jest.resetAllMocks();
  });

  describe('runLoadInstruction', () => {
    it('load one file', async () => {
      const instruction: MicroInstruction = {
        name: 'load',
        params: { targetFiles: ['load.txt'] },
      };
      expect.assertions(5);
      const loaded = await runLoadInstruction(
        { currentPath: modulePath, termFormatter, errTermFormatter },
        instruction
      );
      expect(termFormatter).toHaveBeenCalledWith({
        detail: { targetFiles: ['load.txt'] },
        format: 'human',
        kind: 'intro',
        title: 'Starting load ...',
      });
      expect(loaded).toHaveLength(2);
      expect(loaded[0]?.path).toBe('src/index.ts');
      expect(loaded[1]?.path).toBe('src/problematic.ts');
      expect(loaded[1]?.tags).toContain('buggy');
    });
  });
  describe('runFilesInstruction', () => {
    it('accept files directly', () => {
      const instruction: MicroInstruction = {
        name: 'files',
        params: { targetFiles: ['src/file1.ts', 'src/file2.ts;tag2'] },
      };
      const loaded = runFilesInstruction(
        { currentPath: 'path/not-used-here', termFormatter, errTermFormatter },
        instruction
      );
      expect(termFormatter).toHaveBeenCalledTimes(1);
      expect(loaded).toHaveLength(2);
      expect(loaded[0]?.path).toBe('src/file1.ts');
      expect(loaded[1]?.path).toBe('src/file2.ts');
      expect(loaded[1]?.tags).toContain('tag2');
    });
  });
  describe('runGlobInstruction', () => {
    it('run glob', async () => {
      const instruction: MicroInstruction = {
        name: 'glob',
        params: { targetFiles: ['src/**/*', 'test/**/*'] },
      };
      expect.assertions(5);
      const loaded = await runGlobInstruction(
        { currentPath: modulePath, termFormatter, errTermFormatter },
        instruction
      );
      expect(termFormatter).toHaveBeenCalledTimes(1);
      expect(loaded).toHaveLength(3);
      expect(loaded[0]?.path).toBe('src/index.ts');
      expect(loaded[1]?.path).toBe('src/problematic.ts');
      expect(loaded[2]?.path).toBe('test/index.test.ts');
    });
  });
  describe('runFilterInstruction', () => {
    it('filter files using advanced filtering', () => {
      const instruction: MicroInstruction = {
        name: 'filter',
        params: { query: ['--with-path-starting', 'src/'] },
      };
      const loaded = runFilterInstruction(
        { currentPath: 'path/not-used-here', termFormatter, errTermFormatter },
        instruction,
        [
          { path: 'src/this.ts', tags: [] },
          { path: 'other/that.ts', tags: [] },
        ]
      );
      expect(termFormatter).toHaveBeenCalledTimes(1);
      expect(loaded).toHaveLength(1);
      expect(loaded[0]?.path).toBe('src/this.ts');
    });
  });
});
